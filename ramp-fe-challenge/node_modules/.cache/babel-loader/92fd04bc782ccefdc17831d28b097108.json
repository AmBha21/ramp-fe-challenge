{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [showLoadMoreButton, setShowLoadMoreButton] = useState(true);\n  const fetchAll = useCallback(async () => {\n    setIsLoadingTransactions(true);\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n\n    if (response && response.nextPage === null) {\n      setIsLoadingTransactions(false);\n      return;\n    } // BUG 4: Modified this function to append instead of replace the data\n\n\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        setIsLoadingTransactions(false);\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        setIsLoadingTransactions(false);\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"PKVpfx/xgq8PoDIScdx8ghTkpFg=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","isLoadingTransactions","setIsLoadingTransactions","showLoadMoreButton","setShowLoadMoreButton","fetchAll","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/amolbhagavathi/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const [showLoadMoreButton, setShowLoadMoreButton] = useState(true);\n\n  const fetchAll = useCallback(async () => {\n    setIsLoadingTransactions(true);\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    if (response && response.nextPage === null) {\n      setIsLoadingTransactions(false);\n      return;\n    }\n    \n    // BUG 4: Modified this function to append instead of replace the data\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        setIsLoadingTransactions(false);\n        return previousResponse;\n      }\n  \n      if (previousResponse === null) {\n        setIsLoadingTransactions(false);\n        return response;\n      }\n  \n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAGA,MAAM,CAACO,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAAC,KAAD,CAAlE;EACA,MAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,IAAD,CAA5D;EAEA,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,YAAY;IACvCS,wBAAwB,CAAC,IAAD,CAAxB;IACA,MAAMI,QAAQ,GAAG,MAAMT,cAAc,CACnC,uBADmC,EAEnC;MACEU,IAAI,EAAER,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACS;IADnE,CAFmC,CAArC;;IAOA,IAAIF,QAAQ,IAAIA,QAAQ,CAACE,QAAT,KAAsB,IAAtC,EAA4C;MAC1CN,wBAAwB,CAAC,KAAD,CAAxB;MACA;IACD,CAZsC,CAcvC;;;IACAF,wBAAwB,CAAES,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAjB,EAAuB;QACrBJ,wBAAwB,CAAC,KAAD,CAAxB;QACA,OAAOO,gBAAP;MACD;;MAED,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7BP,wBAAwB,CAAC,KAAD,CAAxB;QACA,OAAOI,QAAP;MACD;;MAED,OAAO;QACLI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CADD;QAELF,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAfuB,CAAxB;EAgBD,CA/B2B,EA+BzB,CAACX,cAAD,EAAiBE,qBAAjB,CA/ByB,CAA5B;EAiCA,MAAMY,cAAc,GAAGlB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEU,IAAI,EAAEX,qBAAR;IAA+BD,OAA/B;IAAwCO,QAAxC;IAAkDM;EAAlD,CAAP;AACD;;GA9Cef,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}