{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n  const fetchAll = useCallback(async () => {\n    setIsLoadingTransactions(true);\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n\n    if (!response || response && response.nextPage === null && response.data.length === 0) {\n      // If there are no more pages and no data, disable loading and hide button\n      setIsLoadingTransactions(false);\n      return;\n    } // BUG 4: Modified this function to append instead of replace the data\n\n\n    setPaginatedTransactions(previousResponse => {\n      if (response === null) {\n        setIsLoadingTransactions(false);\n        return previousResponse;\n      }\n\n      if (previousResponse === null) {\n        setIsLoadingTransactions(false);\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"82rZXht+cD6n8C26C8ERnRDy0dY=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","isLoadingTransactions","setIsLoadingTransactions","fetchAll","response","page","nextPage","data","length","previousResponse","invalidateData"],"sources":["/Users/amolbhagavathi/Downloads/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  const [isLoadingTransactions, setIsLoadingTransactions] = useState(false);\n\n  const fetchAll = useCallback(async () => {\n    setIsLoadingTransactions(true);\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n  \n    if (!response || (response && response.nextPage === null && response.data.length === 0)) {\n      // If there are no more pages and no data, disable loading and hide button\n      setIsLoadingTransactions(false);\n      return;\n    }\n        \n    // BUG 4: Modified this function to append instead of replace the data\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null) {\n        setIsLoadingTransactions(false);\n        return previousResponse;\n      }\n  \n      if (previousResponse === null) {\n        setIsLoadingTransactions(false);\n        return response;\n      }\n  \n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAGA,MAAM,CAACO,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAAC,KAAD,CAAlE;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvCS,wBAAwB,CAAC,IAAD,CAAxB;IACA,MAAME,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,EAAEN,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACO;IADnE,CAFmC,CAArC;;IAOA,IAAI,CAACF,QAAD,IAAcA,QAAQ,IAAIA,QAAQ,CAACE,QAAT,KAAsB,IAAlC,IAA0CF,QAAQ,CAACG,IAAT,CAAcC,MAAd,KAAyB,CAArF,EAAyF;MACvF;MACAN,wBAAwB,CAAC,KAAD,CAAxB;MACA;IACD,CAbsC,CAevC;;;IACAF,wBAAwB,CAAES,gBAAD,IAAsB;MAC7C,IAAIL,QAAQ,KAAK,IAAjB,EAAuB;QACrBF,wBAAwB,CAAC,KAAD,CAAxB;QACA,OAAOO,gBAAP;MACD;;MAED,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7BP,wBAAwB,CAAC,KAAD,CAAxB;QACA,OAAOE,QAAP;MACD;;MAED,OAAO;QACLG,IAAI,EAAE,CAAC,GAAGE,gBAAgB,CAACF,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CADD;QAELD,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAfuB,CAAxB;EAgBD,CAhC2B,EAgCzB,CAACT,cAAD,EAAiBE,qBAAjB,CAhCyB,CAA5B;EAkCA,MAAMW,cAAc,GAAGjB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;GA9Ced,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}